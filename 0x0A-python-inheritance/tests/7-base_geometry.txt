The ``BaseGeometry`` module
==========================

Using ``BaseGeometry``
---------------------

Import class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

    >>> bg = BaseGeometry()

    >>> bg.integer_validator("int", 999)

    >>> bg.integer_validator("Giant", 9999999999999999999999999999999999999999999999999999999999999999999999)

    >>> bg.integer_validator("Zero", 0)
    Traceback (most recent call last):
    ValueError: Zero must be greater than 0

    >>> bg.integer_validator("Negative", -999)
    Traceback (most recent call last):
    ValueError: Negative must be greater than 0

    >>> bg.integer_validator("Negative", 5.7)
    Traceback (most recent call last):
    TypeError: Negative must be an integer

    >>> bg.integer_validator("Lonely")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("T-T", float('nan'))
    Traceback (most recent call last):
    TypeError: T-T must be an integer

    >>> bg.integer_validator("Other", [9])
    Traceback (most recent call last):
    TypeError: Other must be an integer

    >>> bg.integer_validator("Other", (9,))
    Traceback (most recent call last):
    TypeError: Other must be an integer

    >>> bg.integer_validator("Other", {8, 9})
    Traceback (most recent call last):
    TypeError: Other must be an integer

    >>> bg.integer_validator("Other", True)
    Traceback (most recent call last):
    TypeError: Other must be an integer

    >>> bg.integer_validator("Other", None)
    Traceback (most recent call last):
    TypeError: Other must be an integer

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented
